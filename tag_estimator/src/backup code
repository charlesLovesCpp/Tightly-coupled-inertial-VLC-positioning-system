    // loadFile
    std::string tag_file;
    if (nh.getParam("tag_file", tag_file)) {
	ROS_INFO_STREAM("Loaded " << "tag_file ");
    } else {
	ROS_ERROR_STREAM("Failed to load " << "tag_file ");
	nh.shutdown();
    }
    
    cv::FileStorage fsDictionary(tag_file, cv::FileStorage::READ);
    if (!fsDictionary.isOpened()) {
	std::cerr << "ERROR: Wrong path to settings" << std::endl;
    } 
    
    int n_tag = fsDictionary["TagNumber"];
   
    for (int i; i < n_tag; ++i) {
	
	int tag_id;
	double tag_size;
	cv::Mat cv_R, cv_T;
	Eigen::Matrix3d eigen_R;
	Eigen::Vector3d eigen_T;  
	
	stringstream ss1, ss2, ss3, ss4;
	ss1 << "id_" << i;
	ss2 << "size_" << i;
	ss3 << "TagRotation_" << i;
	ss4 << "TagPosition_" << i;
	
	tag_id = fsDictionary[ss1.str()];
	tag_size = fsDictionary[ss2.str()];
	fsDictionary[ss3.str()] >> cv_R;
	fsDictionary[ss4.str()] >> cv_T;
	cv::cv2eigen(cv_R, eigen_R);
	cv::cv2eigen(cv_T, eigen_T);
	Eigen::Quaterniond Q(eigen_R);
	eigen_R = Q.normalized();	
	
	vector<Point*> pts;
		
	Vector3d p_tl = eigen_T;
	Vector3d p_tr = eigen_R * Vector3d(tag_size, 0, 0) + p_tl;
	Vector3d p_br = eigen_R * Vector3d(tag_size, tag_size, 0) + p_tl;
	Vector3d p_bl = eigen_R * Vector3d(0, tag_size, 0) + p_tl;
	Point* pt_tl = new Point(Point::tag_point_counter++, p_tl);
	Point* pt_tr = new Point(Point::tag_point_counter++, p_tr);
	Point* pt_br = new Point(Point::tag_point_counter++, p_br);
	Point* pt_bl = new Point(Point::tag_point_counter++, p_bl);
	pts.push_back(pt_tl);
	pts.push_back(pt_tr);
	pts.push_back(pt_br);
	pts.push_back(pt_bl);
	
	global_tags_dic[tag_id] = make_pair(pts, eigen_R);
	ROS_INFO("Loading tag %d from tag_file", tag_id);
    }
    
//     {
// 	Vector3d sum_g;
// 	for (unsigned int i; i <= WINDOW_SIZE; ++i) {
// 	    double dt = frames[i]->pre_integration->sum_dt;
// 	    Vector3d tmp_g = frames[i]->pre_integration->delta_v / dt;
// 	    sum_g += tmp_g;
// 	}
// 	Vector3d aver_g;
// 	aver_g = sum_g * 1.0 / (WINDOW_SIZE - 1);
// 	double var = 0;
// 	for (unsigned int i; i <= WINDOW_SIZE; ++i) {
// 	    double dt = frames[i]->pre_integration->sum_dt;
// 	    Vector3d tmp_g = frames[i]->pre_integration->delta_v / dt;
// 	    var += (tmp_g - aver_g).transpose() * (tmp_g - aver_g);
// 	}	
// 	var = sqrt(var / ((int)all_image_frame.size() - 1));
//         if(var < 0.25)
//         {
//             ROS_INFO("IMU excitation not enouth!");
//             //return false;
//         }	
//     }

    
//     if (global_init_flag == NO) {
// 	if (!frames[window_counter]->apriltag_fts.empty()) {
// 	    // Initialize global pose
// 	    Vector3d t;
// 	    Matrix3d R;
// 	    getRelativeTranslationRotationByMultiTags(frames[window_counter]->apriltag_fts, t, R); 
// 	    ROS_INFO_STREAM("R : " << std::endl << R);
// 	    ROS_INFO_STREAM("T : " << std::endl << t.transpose());
// 
// // 	    resetTranslationRotation(window_counter);//Reset Rs, Ps   
// 	    global_init_flag = OK;
// 
// 	} else {
// 	    
// 	}	    
//     }
//     
//     
//     if (window_counter == WINDOW_SIZE) {
// 	if (solver_flag == INITIAL) {
// 	    bool result = false;
// 	    if ((Headers[WINDOW_SIZE].stamp.toSec() - initial_timestamp) > 0.1) {	
// 		// initStructure();
// 	    }
// 	}
// 	
// 	if (solver_flag == NON_LINEAR) {
// 	    if (global_init_flag == NO);
// 	}
// 	
//     } else {
// 	window_counter++;
//     }

    
    
    

    
    {
	vector<Point*> pts;
	int tag_id = 1;
	double tag_size = 6;
	Matrix3d eigen_R = Eigen::MatrixXd::Identity(3, 3);
	Vector3d p_tl = Vector3d(50, 0, 0);
	Vector3d p_tr = eigen_R * Vector3d(tag_size, 0, 0) + p_tl;
	Vector3d p_br = eigen_R * Vector3d(tag_size, tag_size, 0) + p_tl;
	Vector3d p_bl = eigen_R * Vector3d(0, tag_size, 0) + p_tl;
	Point* pt_tl = new Point(-1, p_tl);
	Point* pt_tr = new Point(-1, p_tr);
	Point* pt_br = new Point(-1, p_br);
	Point* pt_bl = new Point(-1, p_bl);
	pts.push_back(pt_tl);
	pts.push_back(pt_tr);
	pts.push_back(pt_br);
	pts.push_back(pt_bl);
	
	global_tags_dic[tag_id] = make_pair(pts, eigen_R);	
    }
    
    
    {
	vector<Point*> pts;
	int tag_id = 2;
	double tag_size = 6;
	Matrix3d eigen_R = Eigen::MatrixXd::Identity(3, 3);
	Vector3d p_tl = Vector3d(0, 50, 0);
	Vector3d p_tr = eigen_R * Vector3d(tag_size, 0, 0) + p_tl;
	Vector3d p_br = eigen_R * Vector3d(tag_size, tag_size, 0) + p_tl;
	Vector3d p_bl = eigen_R * Vector3d(0, tag_size, 0) + p_tl;
	Point* pt_tl = new Point(-1, p_tl);
	Point* pt_tr = new Point(-1, p_tr);
	Point* pt_br = new Point(-1, p_br);
	Point* pt_bl = new Point(-1, p_bl);
	pts.push_back(pt_tl);
	pts.push_back(pt_tr);
	pts.push_back(pt_br);
	pts.push_back(pt_bl);
	
	global_tags_dic[tag_id] = make_pair(pts, eigen_R);	
    }    

        for (auto& pt_m : pts_map) {
	Point* pt = pt_m.second;
	if (pt->obs.size() < 2)
	    continue;
	
	Feature* first_ftr = pt->obs.front();
	for (auto& ftr : pt->obs) {
	    ReprojectionFactor* repro_factor = new ReprojectionFactor(first_ftr->pt_c, ftr->pt_c);
	    problem.AddResidualBlock(repro_factor, loss_function, 
				     first_ftr->frame->para_Pose,
				     ftr->frame->para_Pose, 
				     para_Ex_Pose, first_ftr->inv_depth);
	}
    }
    
bool Estimator::linearAlignment()
{
    Vector3d _g;
    VectorXd _x;
    
    int n_state = (WINDOW_SIZE + 1) * 3 + 3 + 1;
    Eigen::MatrixXd A(n_state, n_state);
    VectorXd b(n_state);
    A.setZero();
    b.setZero();
    
    for (unsigned int i = 0; i < WINDOW_SIZE; ++i) {
	Eigen::MatrixXd H(6, 10);
	VectorXd z(6);
	H.setZero();
	z.setZero();
	
	double dt = frames[i+1]->pre_integration->sum_dt;

        H.block<3, 3>(0, 0) = -dt * Matrix3d::Identity();
        H.block<3, 3>(0, 6) = frames[i]->R_w_b.transpose() * dt * dt / 2 * Matrix3d::Identity();
        H.block<3, 1>(0, 9) = frames[i]->R_w_b.transpose() * (frames[i+1]->P_w - frames[i]->P_w); 
        z.block<3, 1>(0, 0) = frames[i+1]->pre_integration->delta_p + frames[i]->R_w_b.transpose() * frames[i+1]->R_w_b * tic - tic;
	
        H.block<3, 3>(3, 0) = -Matrix3d::Identity();
        H.block<3, 3>(3, 3) = frames[i]->R_w_b.transpose() * frames[i+1]->R_w_b;
        H.block<3, 3>(3, 6) = frames[i]->R_w_b.transpose() * dt * Matrix3d::Identity();
        z.block<3, 1>(3, 0) = frames[i+1]->pre_integration->delta_v;

        Matrix<double, 6, 6> cov_inv = Matrix<double, 6, 6>::Zero();
        cov_inv.setIdentity();
	
	MatrixXd tmp_A = H.transpose() * cov_inv * H;
	VectorXd tmp_b = H.transpose() * cov_inv * z;
	
	A.block<6, 6>(i*3, i*3) += tmp_A.topLeftCorner<6, 6>();
	b.segment<6>(i*3) += tmp_b.head<6>();
	
	A.bottomRightCorner<4, 4>() += tmp_A.bottomRightCorner<4, 4>();
	b.tail<4>() += tmp_b.tail<4>();
	
	A.block<6, 4>(i*3, n_state - 4) += tmp_A.topRightCorner<6, 4>();
	A.block<4, 6>(n_state - 4, i*3) += tmp_A.bottomLeftCorner<4, 6>();
    }
    
    A = A * 1000;
    b = b * 1000;
    _x = A.ldlt().solve(b);
    double s = _x(n_state - 1);
    ROS_INFO("Estimated scale: %f", s);
    _g = _x.segment<3>(n_state - 4);
    if(fabs(_g.norm() - G.norm()) > 1.0 || s < 0) {
	ROS_WARN("g is wrong");
	return false;
    } 
    
    RefineGravity(_g, _x);
    s = (_x.tail<1>())(0);
    if(s < 0.0) {
	ROS_WARN("Scale is negitive");
	return false;
    }
    ROS_INFO_STREAM(" Gravity refine     " << g.norm() << " " << g.transpose());
    // Set initial velocity
    for (unsigned int i = 0; i <= WINDOW_SIZE; ++i) {
	frames[i]->setVelocity(_x.segment<3>(i*3));
    }
    
    // Set constant scale between tag frame(F_w) and imu frame
    s_imu_tag = s;
    
    // Set constant gravity
    g = _g;
    
    return true;
}

//     Matrix3d R_c_w;  
//     Vector3d P_c;
// 
//     if (!solveGlobalRT(window_counter, R_c_w, P_c, 1, false)) {
// 	ROS_INFO("Fail solving position from tag");
// 	return;
//     } else {
// 	frames[window_counter]->setRotation(R_c_w.transpose() * ric.transpose());
// 	frames[window_counter]->setPosition(P_c);
// 	frames[window_counter]->setVelocity(Vector3d::Zero());
//     }

void Estimator::solvePnPByCeres()
{
    ceres::Problem problem;
    ceres::LossFunction* loss_function;
    loss_function = new ceres::CauchyLoss(1.0);    
    
    int num = 1;
    Vector3d P_w[num];
    Eigen::Quaterniond Q_w[num];
    double para_pose[num][7];
    
    for (unsigned int i = 0; i < num; ++i) {
	P_w[i].setZero();
	Q_w[i].setIdentity();
	
	para_pose[i][0] = P_w[i].x();
        para_pose[i][1] = P_w[i].y();
        para_pose[i][2] = P_w[i].z();
        para_pose[i][3] = Q_w[i].x();
        para_pose[i][4] = Q_w[i].y();
        para_pose[i][5] = Q_w[i].z();
        para_pose[i][6] = Q_w[i].w();
    }

    
    
    // Point factor fails
    ceres::LocalParameterization* local_parameterization = new PoseLocalParameterization();
    problem.AddParameterBlock(para_Ex_Pose, SIZE_POSE, local_parameterization);
    problem.SetParameterBlockConstant(para_Ex_Pose); 
    
    for (unsigned int i = 0; i < num; ++i) {
	ceres::LocalParameterization* local_parameterization = new PoseLocalParameterization();
	problem.AddParameterBlock(para_pose[i], SIZE_POSE, local_parameterization);
    }    
    
    AprilTagInstance* tag_instance = frames[window_counter]->apriltag_fts.back()->tag_instance;
    AprilTagFeature* tag_ftr = frames[window_counter]->apriltag_fts.back();
    
    for (unsigned int i = 0; i < 4; ++i) {
	problem.AddParameterBlock(tag_instance->position[i], 3);	
	problem.SetParameterBlockConstant(tag_instance->position[i]);
	
	Vector3d corner = tag_ftr->tag_fts[i]->pt_c;
	PointFactor* point_factor = new PointFactor(corner);
	problem.AddResidualBlock(point_factor, loss_function, tag_ftr->frame->para_Pose, para_Ex_Pose, tag_instance->position[i]);
    }

    ceres::Solver::Options options;
    options.linear_solver_type = ceres::DENSE_SCHUR;
    options.trust_region_strategy_type = ceres::DOGLEG;
    options.max_solver_time_in_seconds = 0.2;
    
    ceres::Solver::Summary summary;
    ceres::Solve(options, &problem, &summary);   
    
    if (summary.termination_type == ceres::CONVERGENCE || summary.final_cost < 5e-03) {
	ROS_INFO("Ceres converge!");
    }
    else {
	ROS_INFO("Ceres does not converge...");
	return;
    } 
    
    for (unsigned int i = 0; i < num; ++i) {
	P_w[i] = Vector3d(para_pose[i][0], 
			  para_pose[i][1],
			  para_pose[i][2]);
	ROS_INFO_STREAM("My solvePnP in ceres: P_w : " << P_w[i].transpose());
    }
}

void Estimator::solvePnPByCeres()
{
    ceres::Problem problem;
    ceres::LossFunction* loss_function;
    loss_function = new ceres::CauchyLoss(1.0);    
    
    int num = 1;
    Vector3d P_w[num];
    Eigen::Quaterniond Q_w[num];
    double para_pose[num][7];
    double para_ex_pose[7];
   
    Eigen::Quaterniond q(Eigen::Quaterniond::Identity());
    para_ex_pose[0] = 0;
    para_ex_pose[1] = 0;
    para_ex_pose[2] = 0;
    para_ex_pose[3] = q.x();
    para_ex_pose[4] = q.y();
    para_ex_pose[5] = q.z();
    para_ex_pose[6] = q.w();
    
    for (unsigned int i = 0; i < num; ++i) {
	P_w[i].setZero();
	P_w[i].x() = 3;
	P_w[i].y() = 10;
	P_w[i].z() = 20;
	Q_w[i].setIdentity();

	
	para_pose[i][0] = P_w[i].x();
        para_pose[i][1] = P_w[i].y();
        para_pose[i][2] = P_w[i].z();
        para_pose[i][3] = Q_w[i].x();
        para_pose[i][4] = Q_w[i].y();
        para_pose[i][5] = Q_w[i].z();
        para_pose[i][6] = Q_w[i].w();
    }

    
/*    
    // Point factor fails
    ceres::LocalParameterization* local_parameterization = new PoseLocalParameterization();
    problem.AddParameterBlock(para_ex_pose, SIZE_POSE, local_parameterization);
    problem.SetParameterBlockConstant(para_ex_pose); */
    
    for (unsigned int i = 0; i < num; ++i) {
	ceres::LocalParameterization* local_parameterization = new PoseLocalParameterization();
	problem.AddParameterBlock(para_pose[i], SIZE_POSE, local_parameterization);
    }    
    
    AprilTagInstance* tag_instance = frames[window_counter]->apriltag_fts.back()->tag_instance;
    AprilTagFeature* tag_ftr = frames[window_counter]->apriltag_fts.back();
    
    for (unsigned int i = 0; i < 4; ++i) {
	problem.AddParameterBlock(tag_instance->position[i], 3);	
	problem.SetParameterBlockConstant(tag_instance->position[i]);
	
	Vector3d corner = tag_ftr->tag_fts[i]->pt_c;
	PointFactor* point_factor = new PointFactor(corner);
	problem.AddResidualBlock(point_factor, NULL, para_pose[0], para_ex_pose, tag_instance->position[i]);
    }

    ceres::Solver::Options options;
    options.linear_solver_type = ceres::DENSE_SCHUR;
    options.trust_region_strategy_type = ceres::DOGLEG;
    options.max_solver_time_in_seconds = 0.2;
    
    ceres::Solver::Summary summary;
    ceres::Solve(options, &problem, &summary);   
    
    if (summary.termination_type == ceres::CONVERGENCE || summary.final_cost < 5e-03) {
	ROS_INFO("Ceres converge!");
    }
    else {
	ROS_INFO("Ceres does not converge...");
	return;
    } 
    
    for (unsigned int i = 0; i < num; ++i) {
	P_w[i] = Vector3d(para_pose[i][0], 
			  para_pose[i][1],
			  para_pose[i][2]);
	ROS_INFO_STREAM("My solvePnP in ceres: P_w : " << P_w[i].transpose());
    }
}


void Estimator::start()
{
    if (frames[window_counter]->apriltag_fts.size() != 0) {
	solvePnPByCeres();
/*	
	if (window_counter == WINDOW_SIZE) {
	    solvePnPByCeres();
	    window_counter = 0;
	} else {
	    window_counter++;
	}*/
	
    }
    
}
/*
// This work
void Estimator::solvePnPByCeres()
{ 
    int num = window_counter+1;
    Vector3d P_w[num];
    Eigen::Quaterniond Q_w[num];
    double para_translation[num][3];
    double para_rotation[num][4];
    
    ceres::Problem problem;
    ceres::LocalParameterization* local_parameterization = new ceres::QuaternionParameterization(); 
    
    for (unsigned int i = 0; i < num; ++i) {
	
	P_w[i].setZero();
	Q_w[i].setIdentity();
	P_w[i].x() = 2;
	P_w[i].y() = 2;
	P_w[i].z() = 2;	
	para_translation[i][0] = P_w[i].x();
        para_translation[i][1] = P_w[i].y();
        para_translation[i][2] = P_w[i].z();
        para_rotation[i][1] = Q_w[i].x();
        para_rotation[i][2] = Q_w[i].y();
        para_rotation[i][3] = Q_w[i].z();
        para_rotation[i][0] = Q_w[i].w();
	
	problem.AddParameterBlock(para_rotation[i], 4, local_parameterization);
	problem.AddParameterBlock(para_translation[i], 3);	
    }

    for (unsigned int i = 0; i < num; ++i) {
	AprilTagInstance* tag_instance = frames[i]->apriltag_fts.back()->tag_instance;
	AprilTagFeature* tag_ftr = frames[i]->apriltag_fts.back();
	
	for (unsigned int j = 0; j < 4; ++j) {
	    problem.AddParameterBlock(tag_instance->position[j], 3);	
	    problem.SetParameterBlockConstant(tag_instance->position[j]);	
	    
	    Vector3d corner = tag_ftr->tag_fts[j]->pt_c;
	    ceres::CostFunction* cost_function = ReprojectionError3D::Create(corner.x(), corner.y());
	    problem.AddResidualBlock(cost_function, NULL, para_rotation[i], para_translation[i], 
								    tag_instance->position[j]);	 
	}  
    }  

    ceres::Solver::Options options;
    options.linear_solver_type = ceres::DENSE_SCHUR;
    options.trust_region_strategy_type = ceres::DOGLEG;
    options.max_solver_time_in_seconds = 0.2;
    
    ceres::Solver::Summary summary;
    ceres::Solve(options, &problem, &summary);   
      
    if (summary.termination_type == ceres::CONVERGENCE || summary.final_cost < 5e-03) {
	ROS_INFO("Ceres converge!");
    }
    else {
	ROS_INFO("Ceres does not converge...");
	return;
    } 
    
    for (unsigned int i = 0; i < num; ++i) {
	Vector3d R_c(para_translation[i][0], 
		     para_translation[i][1],
		     para_translation[i][2]);
	
	Eigen::Quaterniond Q_c;
	Q_w[i].w() = para_rotation[i][0]; 
	Q_w[i].x() = para_rotation[i][1]; 
	Q_w[i].y() = para_rotation[i][2]; 
	Q_w[i].z() = para_rotation[i][3];
	Q_w[i] = Q_w[i].inverse();
	P_w[i] = -1 * (Q_w[i] * R_c);
	
	ROS_INFO_STREAM("My solvePnP in ceres:"<< " frame " <<  i  <<" P_w : " << P_w[i].transpose());
    }
}*/


/*
void Estimator::solvePnPByCeres()
{
    ceres::Problem problem;
    ceres::LossFunction* loss_function;
    loss_function = new ceres::CauchyLoss(1.0);    
    
    int num = 1;
    Vector3d P_w[num];
    Eigen::Quaterniond Q_w[num];
    double para_pose[num][7];
    
    for (unsigned int i = 0; i < num; ++i) {
	P_w[i].setZero();
	P_w[i].x() = 20;
	P_w[i].y() = 20;
	P_w[i].z() = 20;
	Q_w[i].setIdentity();

	para_pose[i][0] = P_w[i].x();
        para_pose[i][1] = P_w[i].y();
        para_pose[i][2] = P_w[i].z();
        para_pose[i][3] = Q_w[i].x();
        para_pose[i][4] = Q_w[i].y();
        para_pose[i][5] = Q_w[i].z();
        para_pose[i][6] = Q_w[i].w();
    }
    
//     for (unsigned int i = 0; i < num; ++i) {
	ceres::LocalParameterization* local_parameterization = new PoseLocalParameterization();
	problem.AddParameterBlock(para_pose[0], SIZE_POSE, local_parameterization);
    //}    
    
    AprilTagInstance* tag_instance = frames[0]->apriltag_fts.back()->tag_instance;
    AprilTagFeature* tag_ftr = frames[0]->apriltag_fts.back();
    
    for (unsigned int i = 0; i < 4; ++i) {
	problem.AddParameterBlock(tag_instance->position[i], 3);	
	problem.SetParameterBlockConstant(tag_instance->position[i]);
	
	Vector3d corner = tag_ftr->tag_fts[i]->pt_c;
	PointFactor* point_factor = new PointFactor(corner);
	problem.AddResidualBlock(point_factor, NULL, para_pose[0], tag_instance->position[i]);
    }

    ceres::Solver::Options options;
    options.linear_solver_type = ceres::DENSE_SCHUR;
    options.trust_region_strategy_type = ceres::DOGLEG;
    options.max_solver_time_in_seconds = 0.2;
    
    ceres::Solver::Summary summary;
    ceres::Solve(options, &problem, &summary);   
    
    if (summary.termination_type == ceres::CONVERGENCE || summary.final_cost < 5e-03) {
	ROS_INFO("Ceres converge!");
    }
    else {
	ROS_INFO("Ceres does not converge...");
	return;
    } 
    
    for (unsigned int i = 0; i < num; ++i) {
	P_w[i] = Vector3d(para_pose[i][0], 
			  para_pose[i][1],
			  para_pose[i][2]);
	ROS_INFO_STREAM("My solvePnP in ceres: P_w : " << P_w[i].transpose());
    }
}*/

/*
void Estimator::solvePnPByCeres()
{
    ceres::Problem problem;
    ceres::LossFunction* loss_function;
    loss_function = new ceres::CauchyLoss(1.0);    
    
    int num = 1;
    Vector3d P_w[num];
    Eigen::Quaterniond Q_w[num];
    double para_pose[num][7];
    double para_ex_pose[7];
   
    Eigen::Quaterniond q(Eigen::Quaterniond::Identity());
    para_ex_pose[0] = 0;
    para_ex_pose[1] = 0;
    para_ex_pose[2] = 0;
    para_ex_pose[3] = q.x();
    para_ex_pose[4] = q.y();
    para_ex_pose[5] = q.z();
    para_ex_pose[6] = q.w();
    
    for (unsigned int i = 0; i < num; ++i) {
	P_w[i].setZero();
	P_w[i].x() = 3;
	P_w[i].y() = 10;
	P_w[i].z() = 20;
	Q_w[i].setIdentity();

	
	para_pose[i][0] = P_w[i].x();
        para_pose[i][1] = P_w[i].y();
        para_pose[i][2] = P_w[i].z();
        para_pose[i][3] = Q_w[i].x();
        para_pose[i][4] = Q_w[i].y();
        para_pose[i][5] = Q_w[i].z();
        para_pose[i][6] = Q_w[i].w();
    }

    
    
    // Point factor fails
    ceres::LocalParameterization* local_parameterization = new PoseLocalParameterization();
    problem.AddParameterBlock(para_ex_pose, SIZE_POSE, local_parameterization);
    problem.SetParameterBlockConstant(para_ex_pose); 
    
    for (unsigned int i = 0; i < num; ++i) {
	ceres::LocalParameterization* local_parameterization = new PoseLocalParameterization();
	problem.AddParameterBlock(para_pose[i], SIZE_POSE, local_parameterization);
    }    
    
    AprilTagInstance* tag_instance = frames[window_counter]->apriltag_fts.back()->tag_instance;
    AprilTagFeature* tag_ftr = frames[window_counter]->apriltag_fts.back();
    
    for (unsigned int i = 0; i < 4; ++i) {
	problem.AddParameterBlock(tag_instance->position[i], 3);	
	problem.SetParameterBlockConstant(tag_instance->position[i]);
	
	Vector3d corner = tag_ftr->tag_fts[i]->pt_c;
	PointFactor* point_factor = new PointFactor(corner);
	problem.AddResidualBlock(point_factor, NULL, para_pose[0], para_ex_pose, tag_instance->position[i]);
    }

    ceres::Solver::Options options;
    options.linear_solver_type = ceres::DENSE_SCHUR;
    options.trust_region_strategy_type = ceres::DOGLEG;
    options.max_solver_time_in_seconds = 0.2;
    
    ceres::Solver::Summary summary;
    ceres::Solve(options, &problem, &summary);   
    
    if (summary.termination_type == ceres::CONVERGENCE || summary.final_cost < 5e-03) {
	ROS_INFO("Ceres converge!");
    }
    else {
	ROS_INFO("Ceres does not converge...");
	return;
    } 
    
    for (unsigned int i = 0; i < num; ++i) {
	P_w[i] = Vector3d(para_pose[i][0], 
			  para_pose[i][1],
			  para_pose[i][2]);
	ROS_INFO_STREAM("My solvePnP in ceres: P_w : " << P_w[i].transpose());
    }
}*/
